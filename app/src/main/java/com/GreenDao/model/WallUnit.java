package com.GreenDao.model;

import java.util.List;
import com.GreenDao.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "WALL_UNIT".
 */
public class WallUnit {

    private Long id;
    /** Not-null value. */
    private String address;
    /** Not-null value. */
    private String name;
    private Long wuTypeId;
    private Long roomId;
    private Long parentId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WallUnitDao myDao;

    private WuType wuType;
    private Long wuType__resolvedKey;

    private Room room;
    private Long room__resolvedKey;

    private WallUnit wallUnit;
    private Long wallUnit__resolvedKey;

    private List<Channel> channels;
    private List<WallUnit> childrenWallUnits;

    public WallUnit() {
    }

    public WallUnit(Long id) {
        this.id = id;
    }

    public WallUnit(Long id, String address, String name, Long wuTypeId, Long roomId, Long parentId) {
        this.id = id;
        this.address = address;
        this.name = name;
        this.wuTypeId = wuTypeId;
        this.roomId = roomId;
        this.parentId = parentId;
    }
    @Override
    public String toString(){
        return this.name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWallUnitDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getAddress() {
        return address;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAddress(String address) {
        this.address = address;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public Long getWuTypeId() {
        return wuTypeId;
    }

    public void setWuTypeId(Long wuTypeId) {
        this.wuTypeId = wuTypeId;
    }

    public Long getRoomId() {
        return roomId;
    }

    public void setRoomId(Long roomId) {
        this.roomId = roomId;
    }

    public Long getParentId() {
        return parentId;
    }

    public void setParentId(Long parentId) {
        this.parentId = parentId;
    }

    /** To-one relationship, resolved on first access. */
    public WuType getWuType() {
        Long __key = this.wuTypeId;
        if (wuType__resolvedKey == null || !wuType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WuTypeDao targetDao = daoSession.getWuTypeDao();
            WuType wuTypeNew = targetDao.load(__key);
            synchronized (this) {
                wuType = wuTypeNew;
            	wuType__resolvedKey = __key;
            }
        }
        return wuType;
    }

    public void setWuType(WuType wuType) {
        synchronized (this) {
            this.wuType = wuType;
            wuTypeId = wuType == null ? null : wuType.getId();
            wuType__resolvedKey = wuTypeId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Room getRoom() {
        Long __key = this.roomId;
        if (room__resolvedKey == null || !room__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RoomDao targetDao = daoSession.getRoomDao();
            Room roomNew = targetDao.load(__key);
            synchronized (this) {
                room = roomNew;
            	room__resolvedKey = __key;
            }
        }
        return room;
    }

    public void setRoom(Room room) {
        synchronized (this) {
            this.room = room;
            roomId = room == null ? null : room.getId();
            room__resolvedKey = roomId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public WallUnit getWallUnit() {
        Long __key = this.parentId;
        if (wallUnit__resolvedKey == null || !wallUnit__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WallUnitDao targetDao = daoSession.getWallUnitDao();
            WallUnit wallUnitNew = targetDao.load(__key);
            synchronized (this) {
                wallUnit = wallUnitNew;
            	wallUnit__resolvedKey = __key;
            }
        }
        return wallUnit;
    }

    public void setWallUnit(WallUnit wallUnit) {
        synchronized (this) {
            this.wallUnit = wallUnit;
            parentId = wallUnit == null ? null : wallUnit.getId();
            wallUnit__resolvedKey = parentId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Channel> getChannels() {
        if (channels == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChannelDao targetDao = daoSession.getChannelDao();
            List<Channel> channelsNew = targetDao._queryWallUnit_Channels(id);
            synchronized (this) {
                if(channels == null) {
                    channels = channelsNew;
                }
            }
        }
        return channels;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChannels() {
        channels = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<WallUnit> getChildrenWallUnits() {
        if (childrenWallUnits == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WallUnitDao targetDao = daoSession.getWallUnitDao();
            List<WallUnit> childrenWallUnitsNew = targetDao._queryWallUnit_ChildrenWallUnits(id);
            synchronized (this) {
                if(childrenWallUnits == null) {
                    childrenWallUnits = childrenWallUnitsNew;
                }
            }
        }
        return childrenWallUnits;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChildrenWallUnits() {
        childrenWallUnits = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
