package com.GreenDao.model;

import java.util.List;
import com.GreenDao.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CHANNEL".
 */
public class Channel {

    private Long id;
    /** Not-null value. */
    private String address;
    private Integer state;
    /** Not-null value. */
    private String name;
    private Long functionId;
    private Long wallUnitId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ChannelDao myDao;

    private Function function;
    private Long function__resolvedKey;

    private WallUnit wallUnit;
    private Long wallUnit__resolvedKey;

    private List<MemoryValue> memoryValues;

    public Channel() {
    }

    public Channel(Long id) {
        this.id = id;
    }

    public Channel(Long id, String address, Integer state, String name, Long functionId, Long wallUnitId) {
        this.id = id;
        this.address = address;
        this.state = state;
        this.name = name;
        this.functionId = functionId;
        this.wallUnitId = wallUnitId;
    }
    @Override
    public String toString(){
        return this.name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getChannelDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getAddress() {
        return address;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAddress(String address) {
        this.address = address;
    }

    public Integer getState() {
        return state;
    }

    public void setState(Integer state) {
        this.state = state;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public Long getFunctionId() {
        return functionId;
    }

    public void setFunctionId(Long functionId) {
        this.functionId = functionId;
    }

    public Long getWallUnitId() {
        return wallUnitId;
    }

    public void setWallUnitId(Long wallUnitId) {
        this.wallUnitId = wallUnitId;
    }

    /** To-one relationship, resolved on first access. */
    public Function getFunction() {
        Long __key = this.functionId;
        if (function__resolvedKey == null || !function__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FunctionDao targetDao = daoSession.getFunctionDao();
            Function functionNew = targetDao.load(__key);
            synchronized (this) {
                function = functionNew;
            	function__resolvedKey = __key;
            }
        }
        return function;
    }

    public void setFunction(Function function) {
        synchronized (this) {
            this.function = function;
            functionId = function == null ? null : function.getId();
            function__resolvedKey = functionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public WallUnit getWallUnit() {
        Long __key = this.wallUnitId;
        if (wallUnit__resolvedKey == null || !wallUnit__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WallUnitDao targetDao = daoSession.getWallUnitDao();
            WallUnit wallUnitNew = targetDao.load(__key);
            synchronized (this) {
                wallUnit = wallUnitNew;
            	wallUnit__resolvedKey = __key;
            }
        }
        return wallUnit;
    }

    public void setWallUnit(WallUnit wallUnit) {
        synchronized (this) {
            this.wallUnit = wallUnit;
            wallUnitId = wallUnit == null ? null : wallUnit.getId();
            wallUnit__resolvedKey = wallUnitId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MemoryValue> getMemoryValues() {
        if (memoryValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MemoryValueDao targetDao = daoSession.getMemoryValueDao();
            List<MemoryValue> memoryValuesNew = targetDao._queryChannel_MemoryValues(id);
            synchronized (this) {
                if(memoryValues == null) {
                    memoryValues = memoryValuesNew;
                }
            }
        }
        return memoryValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMemoryValues() {
        memoryValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
