package com.GreenDao.model;

import java.util.List;
import com.GreenDao.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "MEMORY".
 */
public class Memory {

    private Long id;
    /** Not-null value. */
    private String name;
    private Long memoryTypeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MemoryDao myDao;

    private MemoryType memoryType;
    private Long memoryType__resolvedKey;

    private List<MemoryValue> memoryValues;

    public Memory() {
    }

    public Memory(Long id) {
        this.id = id;
    }

    public Memory(Long id, String name, Long memoryTypeId) {
        this.id = id;
        this.name = name;
        this.memoryTypeId = memoryTypeId;
    }

    @Override
    public String toString(){
        return this.name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMemoryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public Long getMemoryTypeId() {
        return memoryTypeId;
    }

    public void setMemoryTypeId(Long memoryTypeId) {
        this.memoryTypeId = memoryTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public MemoryType getMemoryType() {
        Long __key = this.memoryTypeId;
        if (memoryType__resolvedKey == null || !memoryType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MemoryTypeDao targetDao = daoSession.getMemoryTypeDao();
            MemoryType memoryTypeNew = targetDao.load(__key);
            synchronized (this) {
                memoryType = memoryTypeNew;
            	memoryType__resolvedKey = __key;
            }
        }
        return memoryType;
    }

    public void setMemoryType(MemoryType memoryType) {
        synchronized (this) {
            this.memoryType = memoryType;
            memoryTypeId = memoryType == null ? null : memoryType.getId();
            memoryType__resolvedKey = memoryTypeId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MemoryValue> getMemoryValues() {
        if (memoryValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MemoryValueDao targetDao = daoSession.getMemoryValueDao();
            List<MemoryValue> memoryValuesNew = targetDao._queryMemory_MemoryValues(id);
            synchronized (this) {
                if(memoryValues == null) {
                    memoryValues = memoryValuesNew;
                }
            }
        }
        return memoryValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMemoryValues() {
        memoryValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
