package com.GreenDao.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.GreenDao.model.WallUnit;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WALL_UNIT".
*/
public class WallUnitDao extends AbstractDao<WallUnit, Long> {

    public static final String TABLENAME = "WALL_UNIT";

    /**
     * Properties of entity WallUnit.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Address = new Property(1, String.class, "address", false, "ADDRESS");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property WuTypeId = new Property(3, Long.class, "wuTypeId", false, "WU_TYPE_ID");
        public final static Property RoomId = new Property(4, Long.class, "roomId", false, "ROOM_ID");
        public final static Property ParentId = new Property(5, Long.class, "parentId", false, "PARENT_ID");
    };

    private DaoSession daoSession;

    private Query<WallUnit> wuType_WallUnitsQuery;
    private Query<WallUnit> room_WallUnitsQuery;
    private Query<WallUnit> wallUnit_ChildrenWallUnitsQuery;

    public WallUnitDao(DaoConfig config) {
        super(config);
    }
    
    public WallUnitDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WALL_UNIT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ADDRESS\" TEXT NOT NULL UNIQUE ," + // 1: address
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"WU_TYPE_ID\" INTEGER," + // 3: wuTypeId
                "\"ROOM_ID\" INTEGER," + // 4: roomId
                "\"PARENT_ID\" INTEGER);"); // 5: parentId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WALL_UNIT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WallUnit entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAddress());
        stmt.bindString(3, entity.getName());
 
        Long wuTypeId = entity.getWuTypeId();
        if (wuTypeId != null) {
            stmt.bindLong(4, wuTypeId);
        }
 
        Long roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindLong(5, roomId);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(6, parentId);
        }
    }

    @Override
    protected void attachEntity(WallUnit entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WallUnit readEntity(Cursor cursor, int offset) {
        WallUnit entity = new WallUnit( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // address
            cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // wuTypeId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // roomId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // parentId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WallUnit entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAddress(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setWuTypeId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setRoomId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setParentId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WallUnit entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WallUnit entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "wallUnits" to-many relationship of WuType. */
    public List<WallUnit> _queryWuType_WallUnits(Long wuTypeId) {
        synchronized (this) {
            if (wuType_WallUnitsQuery == null) {
                QueryBuilder<WallUnit> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.WuTypeId.eq(null));
                wuType_WallUnitsQuery = queryBuilder.build();
            }
        }
        Query<WallUnit> query = wuType_WallUnitsQuery.forCurrentThread();
        query.setParameter(0, wuTypeId);
        return query.list();
    }

    /** Internal query to resolve the "wallUnits" to-many relationship of Room. */
    public List<WallUnit> _queryRoom_WallUnits(Long roomId) {
        synchronized (this) {
            if (room_WallUnitsQuery == null) {
                QueryBuilder<WallUnit> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RoomId.eq(null));
                room_WallUnitsQuery = queryBuilder.build();
            }
        }
        Query<WallUnit> query = room_WallUnitsQuery.forCurrentThread();
        query.setParameter(0, roomId);
        return query.list();
    }

    /** Internal query to resolve the "childrenWallUnits" to-many relationship of WallUnit. */
    public List<WallUnit> _queryWallUnit_ChildrenWallUnits(Long parentId) {
        synchronized (this) {
            if (wallUnit_ChildrenWallUnitsQuery == null) {
                QueryBuilder<WallUnit> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentId.eq(null));
                wallUnit_ChildrenWallUnitsQuery = queryBuilder.build();
            }
        }
        Query<WallUnit> query = wallUnit_ChildrenWallUnitsQuery.forCurrentThread();
        query.setParameter(0, parentId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getWuTypeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getRoomDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getWallUnitDao().getAllColumns());
            builder.append(" FROM WALL_UNIT T");
            builder.append(" LEFT JOIN WU_TYPE T0 ON T.\"WU_TYPE_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN ROOM T1 ON T.\"ROOM_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN WALL_UNIT T2 ON T.\"PARENT_ID\"=T2.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected WallUnit loadCurrentDeep(Cursor cursor, boolean lock) {
        WallUnit entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        WuType wuType = loadCurrentOther(daoSession.getWuTypeDao(), cursor, offset);
        entity.setWuType(wuType);
        offset += daoSession.getWuTypeDao().getAllColumns().length;

        Room room = loadCurrentOther(daoSession.getRoomDao(), cursor, offset);
        entity.setRoom(room);
        offset += daoSession.getRoomDao().getAllColumns().length;

        WallUnit wallUnit = loadCurrentOther(daoSession.getWallUnitDao(), cursor, offset);
        entity.setWallUnit(wallUnit);

        return entity;    
    }

    public WallUnit loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<WallUnit> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<WallUnit> list = new ArrayList<WallUnit>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<WallUnit> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<WallUnit> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
